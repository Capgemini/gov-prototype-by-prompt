{% extends "template.njk" %}

{% block pageTitle %}
  {{ "Your workspace: " ~ ws.name if ws else "Create a workspace" }} – Gov Prototype by Prompt
{% endblock %}

{% block beforeContent %}
  {{ govukBreadcrumbs({
    items: [
      {
        text: "Home",
        href: "/"
      },
      {
        text: "Your workspaces",
        href: "/user/workspace"
      }
    ],
    labelText: "Breadcrumb-main"
  }) }}
{% endblock %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <h1 id="pageTitle" class="govuk-heading-l">{{ "Your workspace: " ~ ws.name if ws else "Create a workspace" }}</h1>
      {% if ws %}
        <p id="workspaceLastUpdated" class="govuk-body">Last updated {{ lastUpdated | safe }}.</p>
      {% endif %}
      <form id="workspaceDetailsForm" class="govuk-form-group govuk-!-margin-0" novalidate>
        {{ govukInput({
          id: "workspaceName",
          name: "workspaceName",
          value: ws.name,
          label: {
            text: "Workspace name",
            isPageHeading: false
          }
        }) }}
        <div class="govuk-button-group">
          {{ govukButton({
            text: "Save workspace" if ws else "Create workspace",
            type: "submit",
            classes: "govuk-button--success",
            id: "saveWorkspaceButton"
          }) }}
        </div>
      </form>
      {% if ws.isPersonalWorkspace %}
        <p class ="govuk-body">
          This is your private workspace. You cannot share it with other users.
        </p>
      {% elif ws %}
        <h2 class="govuk-heading-m">Users in this workspace</h2>
        <div class="govuk-form-group">
          <div id="event-name-hint" class="govuk-hint">
            Press the Enter key to add a user
          </div>
          <div class="govuk-input__wrapper">
            <input class="govuk-input" list="allUsers" id="userToAdd" name="userToAdd" autocomplete="off" />
            <datalist id="allUsers" >
              {% for user in allUsers %}
                <option value="{{ user.email }}" data-user-id="{{ user.id }}" data-user-name="{{ user.name }}">{{ user.name }}</option>
              {% endfor %}
            </datalist>
          </div>
        </div>
        {% macro removeUserButton(userId) %}
          {{ govukButton({
            text: "Remove",
            classes: "govuk-button--warning govuk-!-margin-0 remove-shared-user-button",
            attributes: {
              "data-user-id": userId
            },
            disabled: sharedWithUsers | length < 2
          }) }}
        {% endmacro %}
        {% set rows = [
          [{text: "hidden user", classes: "display-none"}, {html: removeUserButton("none"), classes: "display-none"}]
          ] %}
        {% for user in sharedWithUsers %}
          {% set _ = rows.push([
            { text: user.name ~ " (" ~ user.email ~ ")" },
            { html: removeUserButton(user.id) }
          ]) %}
        {% endfor %}
        {{ govukTable({
          firstCellIsHeader: false,
          classes: "shared-with-users-table",
          head: [
            {
              text: "User"
            },
            {
              text: "Remove"
            }
          ],
          rows: rows
        }) }}
      {% endif %}
    </div>
    <div class="govuk-grid-column-one-third">
      {{ govukErrorSummary({
        classes: "govuk-!-margin-bottom-7 display-none",
        titleText: "There was a problem",
        descriptionHtml: "Check the form below."
      }) }}
    </div>
  </div>
{% endblock %}

{% block bodyEnd %}
  {# Run JavaScript at end of the <body>, to avoid blocking the initial render. #}
  {{ super() }}
  <script>
    // Reload the page if the user navigates back
    // This makes sure the submit button is re-enabled
    window.addEventListener("pageshow", function(event) {
      const historyTraversal = event.persisted || 
                            (typeof window.performance != "undefined" && 
                            window.performance.navigation.type === 2);
      if (historyTraversal) {
        window.location.reload();
      }
    });

    document.addEventListener('DOMContentLoaded', async function() {

      const currentUserId = "{{ user.id }}";
      const pageTitle = document.getElementById('pageTitle');
      const workspaceLastUpdated = document.getElementById('workspaceLastUpdated');
      const workspaceDetailsForm = document.getElementById('workspaceDetailsForm');
      const workspaceNameInput = document.getElementById('workspaceName');
      const saveWorkspaceButton = document.getElementById('saveWorkspaceButton');
      const errorSummary = document.getElementsByClassName("govuk-error-summary")[0];
      const errorDescription = document.getElementsByClassName("govuk-error-summary__body")[0];

      const saveWorkspace = async function() {
        errorSummary.classList.add("display-none");

        // Get user IDs from the table
        const sharedWithUserButtons = document.querySelectorAll(".shared-with-users-table button") ?? [];
        const sharedWithUserIds = [];
        for (const button of sharedWithUserButtons) {
          if (button.dataset?.userId && button.dataset?.userId !== 'none') {
            sharedWithUserIds.push(button.dataset.userId);
          }
        }

        // Check that the name is not empty
        const workspaceName = workspaceNameInput.value.trim();
        if (workspaceName === '') {
          errorSummary.classList.remove('display-none');
          errorDescription.innerHTML = "Enter a workspace name.";
          return;
        } else {
          errorSummary.classList.add('display-none');
        }

        // Show processing state
        saveWorkspaceButton.disabled = true;
        saveWorkspaceButton.textContent = 'Processing...';

        // Request to create the prototype
        const data = {'name': workspaceName, 'sharedWithUserIds': sharedWithUserIds};
        fetch('/user/workspace/{{ workspaceId }}', {
          method: 'POST',
          body: JSON.stringify(data),
          headers: {
            'Content-Type': 'application/json'
          }
        }).then(async response => {
          const responseJson = await response.json();
          // If response is OK, show success, otherwise show error
          if (response.ok) {
            if (responseJson?.url) {
              window.location.href = responseJson.url;
            }
            if (workspaceLastUpdated) workspaceLastUpdated.textContent = `Last updated today at ${new Date().toLocaleTimeString()}.`;
            saveWorkspaceButton.disabled = false;
            saveWorkspaceButton.textContent = 'Save workspace';
            pageTitle.textContent = `Your workspace: ${workspaceName}`;
            document.title = `Your workspace: ${workspaceName} – Gov Prototype by Prompt`;
          } else {
            throw new Error(responseJson.message ?? `${response.status} ${response.statusText}`);
          }
        }).catch(err => {
          errorSummary.classList.remove('display-none');
          errorDescription.innerHTML =`${err.message}`;
          saveWorkspaceButton.disabled = false;
          saveWorkspaceButton.textContent = 'Save workspace';
        });
      };

      // Save the workspace when the form is submitted
      workspaceDetailsForm.addEventListener('submit', async function(event) {
        event.preventDefault();
        await saveWorkspace();
      });

      {% if ws and not ws.isPersonalWorkspace %}
        const userToAddInput = document.getElementById('userToAdd');
        const sharedWithUserButtons = document.querySelectorAll(".shared-with-users-table button");

        // Don't submit the form when the user presses enter
        userToAddInput.addEventListener("keydown", function(event) {
          if (event.keyCode == 13) {
            event.preventDefault();
          }
        });

        // Handle adding a user to the workspace
        userToAddInput.addEventListener("keyup", async function (event) {
          if (event.keyCode == 13 && userToAddInput.value.trim() !== '') {
            event.preventDefault();
            errorSummary.classList.add('display-none');
            
            // Get user ID and name from the datalist
            const datalistOption = document.querySelector('option[value="' + userToAddInput.value.trim() + '"]');
            if (datalistOption) {
              const userId = datalistOption.dataset.userId;
              const tableBody = document.querySelector('.shared-with-users-table tbody');

              // Check if the user is already in the table
              const existingIds = [...tableBody.querySelectorAll('tr button')].map(button => {
                return button.dataset.userId;
              });
              if (existingIds.includes(userId)) {
                errorSummary.classList.remove('display-none');
                errorDescription.innerHTML = `User ${userToAddInput.value.trim()} already has access.`;
                return;
              }

              // Duplicate the example row 
              const newRow = tableBody.querySelector('tr:nth-child(2)').cloneNode(true);
              newRow.querySelector('td').textContent = `${datalistOption.dataset.userName} (${userToAddInput.value.trim()})`;
              newRow.querySelectorAll('td').forEach(td => {
                td.classList.remove('display-none');
              });
              newRow.querySelector('button').dataset.userId = userId;
              newRow.querySelector('button').addEventListener('click', removeUserButtonOnClick);
              tableBody.appendChild(newRow);  // Append the new row to the table
              userToAddInput.value = ''; // Clear the input field
              tableBody.querySelector("tr:nth-child(1) td").classList.add('display-none');  // Hide the "Not shared with any users" row
              document.querySelectorAll(".shared-with-users-table button").forEach(button => {
                  button.disabled = false;
              });
              await saveWorkspace();
            } else {
              errorSummary.classList.remove('display-none');
              errorDescription.innerHTML = `User ${userToAddInput.value.trim()} doesn't exist.`;
            }
          }
        });

        // Handle removing a user from the sharing table
        const removeUserButtonOnClick = async function(event) {
          event.preventDefault();
          const userId = event.target.dataset.userId;
          if (userId && userId !== 'none') {
            event.target.closest('tr').remove();
          }
          // If there's only one user left, disable the remove buttons
          const sharedWithUserButtons = document.querySelectorAll(".shared-with-users-table button")
          if (sharedWithUserButtons.length <= 2) {
              sharedWithUserButtons.forEach(button => {
                button.disabled = true;
              });
            }
          await saveWorkspace();
        };
        sharedWithUserButtons.forEach(button => {
          button.addEventListener('click', removeUserButtonOnClick);
        });
      {% endif %}
    });
  </script>
{% endblock %}