{% extends "template.njk" %}

{% block pageTitle %}
  Create prototype â€“ Gov Prototype by Prompt
{% endblock %}

{% block content %}

  <div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
      <form id="promptForm" class="govuk-form-group govuk-!-margin-0" novalidate>
        <h1 class="govuk-heading-l">Create a prototype</h1>
        {{ govukSelect({
          classes: "govuk-!-width-full",
          id: "workspaceId",
          name: "workspaceId",
          label: {
            text: "Choose a workspace",
            classes: "govuk-label--m"
          },
          items: workspaces
        }) }}
        {{ govukTextarea({
          name: "prompt",
          id: "textPrompt",
          rows: 5,
          label: {
            text: "Describe the form or service you want to create",
            classes: "govuk-label--m"
          },
          value: prompt
        }) }}
        {{ govukRadios({
          classes: "govuk-radios--inline",
          name: "designSystem",
          id: "designSystem",
          fieldset: {
            legend: {
              text: "Choose a design system",
              classes: "govuk-fieldset__legend--m"
            }
          },
          hint: {
            text: "This determines the look and feel of the prototype."
          },
          items: [
            {
              value: "GOV.UK",
              text: "GOV.UK",
              checked: true
            },
            {
              value: "HMRC",
              text: "HMRC"
            }
          ]
        }) }}
        <div class="govuk-button-group">
          {{ govukButton({
            id: 'startPrototypeButton',
            text: "Create prototype",
            type: "submit",
            preventDoubleClick: true
          }) }}
        </div>
      </form>
    </div>
    <div class="govuk-grid-column-one-third">
      {{ govukErrorSummary({
        classes: "govuk-!-margin-bottom-7 display-none",
        titleText: "There was a problem",
        descriptionHtml: "Check the form below."
      }) }}
      <h2 class="govuk-heading-m">Instructions</h2>
      <p class="govuk-body">Describe what the form is for, what fields or questions the form should include, and any eligibility criteria or instructions for the user.</p>
      {{ govukDetails({
        summaryText: "View an example prompt",
        text: "Create a driving licence application form. Ask for name, email, date of birth, preferred contact methods, automatic or manual, and to explain any health problems. Must be a UK resident and over 17 years old."
      }) }}
    </div>
  </div>
{% endblock %}

{% block bodyEnd %}
  {# Run JavaScript at end of the <body>, to avoid blocking the initial render. #}
  {{ super() }}
  <script>
    // Reload the page if the user navigates back
    // This makes sure the submit button is re-enabled
    window.addEventListener("pageshow", function(event) {
      const historyTraversal = event.persisted || 
                            (typeof window.performance != "undefined" && 
                            window.performance.navigation.type === 2);
      if (historyTraversal) {
        window.location.reload();
      }
    });

    document.addEventListener('DOMContentLoaded', async function() {

      const promptForm = document.getElementById('promptForm');
      const textPromptInput = document.getElementById('textPrompt');
      const startButton = document.getElementById('startPrototypeButton');
      const errorSummary = document.getElementsByClassName("govuk-error-summary")[0];
      const errorDescription = document.getElementsByClassName("govuk-error-summary__body")[0];

       // Add a hidden error element to the text prompt input
      const errorElement = document.createElement('p');
      errorElement.id = 'textPromptInputErrorMessage';
      errorElement.className = 'govuk-error-message';
      errorElement.innerHTML = `<span class="govuk-visually-hidden">Error:</span> Enter a description for the form you want to create`;
      errorElement.style.display = 'none';
      textPromptInput.parentNode.insertBefore(
          errorElement,
          textPromptInput
      );

      // Handle async form submission
      promptForm.addEventListener('submit', async function(event) {

        // Prevent the default form submission
        event.preventDefault();

        // Check that the text prompt is not empty
        if (textPromptInput.value.trim() === '') {
          errorElement.style.display = '';
          textPromptInput.classList.add('govuk-textarea--error');
          document.querySelector('.govuk-form-group:has(#textPrompt)').classList.add('govuk-form-group--error');
          return;
        } else {
          errorElement.style.display = 'none';
          textPromptInput.classList.remove('govuk-textarea--error');
          document.querySelector('.govuk-form-group:has(#textPrompt)').classList.remove('govuk-form-group--error');
        }

        // Show processing state
        startButton.disabled = true;
        startButton.textContent = 'Processing...';
        
        // Request to create the prototype
        const data = new URLSearchParams();
        for (const pair of new FormData(promptForm)) {
            data.append(pair[0], pair[1]);
        }
        fetch('/create', {
          method: 'POST',
          body: data
        }).then(async response => {
          const responseJson = await response.json();
          // If response is OK, redirect to the prototype page, otherwise show error
          if (response.ok) {
            window.location.href = responseJson.url;
          } else {
            throw new Error(responseJson.message ?? `${response.status} ${response.statusText}`);
          }
        }).catch(err => {
          errorSummary.classList.remove('display-none');
          errorDescription.innerHTML =`${err.message}`;
          startButton.disabled = false;
          startButton.textContent = 'Create prototype';
        });
      });
    });
  </script>
{% endblock %}
