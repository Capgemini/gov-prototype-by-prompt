{% extends "template.njk" %}

{% block pageTitle %}
  Sign in â€“ Gov Prototype by Prompt
{% endblock %}

{% block content %}
  <div class="govuk-grid-row">
    <div class="govuk-grid-column-one-half">
      <h1 class="govuk-heading-l">Sign in to your account</h1>
      <p class="govuk-body">Sign in to your account to start creating prototypes.</p>
      <p class="govuk-body">If you don't have an account, you must <a href="/user/register">create an account</a> first.</p>
      <form id="signinForm" class="govuk-form-group govuk-!-margin-0" novalidate>
        {{ govukInput({
          classes: "govuk-input--width-20",
          label: {
              text: "Email address"
          },
          name: "email",
          id: "email",
          spellcheck: false,
          type: "email",
          autocomplete: "email"
        }) }}
        {{ govukPasswordInput({
          classes: "govuk-input--width-20",
          label: {
              text: "Password"
          },
          name: "password",
          id: "password",
          autocomplete: "current-password"
        }) }}
        <div class="govuk-button-group">
          {{ govukButton({
            id: 'signinButton',
            text: "Sign in",
            type: "submit",
            preventDoubleClick: true
          }) }}
        </div>
      </form>
    </div>
    <div class="govuk-grid-column-one-half">
      {{ govukErrorSummary({
        classes: "govuk-!-margin-bottom-7 display-none",
        titleText: "There was a problem",
        descriptionHtml: "Check the form below."
      }) }}
      <p class="govuk-body">This tool lets you rapidly create prototype forms from a simple description using Generative AI.</p>
      <p class="govuk-body">The generated prototypes use <a class="govuk-link" href="https://design-system.service.gov.uk/" target="_blank">GOV.UK Design System</a> components and best practices.</p>
      <p class="govuk-body">You can test prototypes live, share them with others, and download them to run them locally. You can also edit prototypes to make iterative improvements.</p>
    </div>
  </div>
{% endblock %}

{% block bodyEnd %}
  {# Run JavaScript at end of the <body>, to avoid blocking the initial render. #}
  {{ super() }}
  <script>
    // Reload the page if the user navigates back
    // This makes sure the submit button is re-enabled
    window.addEventListener("pageshow", function(event) {
      const historyTraversal = event.persisted || 
                            (typeof window.performance != "undefined" && 
                            window.performance.navigation.type === 2);
      if (historyTraversal) {
        window.location.reload();
      }
    });

    document.addEventListener('DOMContentLoaded', async function() {

      const referrer = `{{ referrer | safe if referrer else '' }}`;
      const signinForm = document.getElementById('signinForm');
      const formInputs = signinForm.querySelectorAll('input, select');
      const signinButton = document.getElementById('signinButton');
      const errorSummary = document.getElementsByClassName("govuk-error-summary")[0];
      const errorDescription = document.getElementsByClassName("govuk-error-summary__body")[0];

      // Add a hidden error element to the form inputs
      for (const input of formInputs) {
        const errorElement = document.createElement('p');
        errorElement.id = `${input.id}ErrorMessage`;
        errorElement.className = 'govuk-error-message';
        errorElement.style.display = 'none';
        if (input.classList.contains('govuk-password-input__input')) {
          input.parentNode.parentNode.insertBefore(
            errorElement,
            input.parentNode
          );
        } else {
          input.parentNode.insertBefore(
            errorElement,
            input
          );
        }
      }

      // Handle async form submission
      signinForm.addEventListener('submit', async function(event) {

        // Prevent the default form submission
        event.preventDefault();

        // Show processing state
        signinButton.disabled = true;
        signinButton.textContent = 'Processing...';
        
        // Request to sign in
        const data = new URLSearchParams();
        for (const pair of new FormData(signinForm)) {
            data.append(pair[0], pair[1]);
        }
        fetch('/user/sign-in', {
          method: 'POST',
          body: data,
          credentials: 'include'
        }).then(async response => {

          // Reset the form state
          signinButton.disabled = false;
          signinButton.textContent = 'Sign in';
          formInputs.forEach((input) => {
            input.classList.remove('govuk-input--error');
          });
          document.querySelectorAll('.govuk-error-message').forEach((el) => {
            el.style.display = 'none'; 
            el.parentNode.classList.remove('govuk-form-group--error')
          });
          errorSummary.classList.add('display-none');

          // If response is OK, redirect to the previous page or homepage
          if (response.ok) {
            window.location.href = referrer || '/';

          // Otherwise provide the errors
          } else {
            const responseJson = await response.json();
            for (const input of formInputs) {
              const errorElement = document.getElementById(`${input.id}ErrorMessage`);
              errorElement.style.display = '';
              input.classList.add('govuk-input--error');
              errorElement.parentNode.classList.add('govuk-form-group--error');
            }
            throw new Error(responseJson.message ?? `${response.status} ${response.statusText}`);
          }
        }).catch(err => {
          errorSummary.classList.remove('display-none');
          errorDescription.innerHTML =`${err.message}`;
          signinButton.disabled = false;
          signinButton.textContent = 'Sign in';
        });
      });
    });
  </script>
{% endblock %}